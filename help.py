from telethon import functions

from userbot import catub

from ..Config import Config
from ..core import CMD_INFO, GRP_INFO, PLG_INFO
from ..core.managers import edit_delete, edit_or_reply
from ..helpers.utils import reply_id

cmdprefix = Config.COMMAND_HAND_LER
BADCAT = Config.BADCAT

plugin_category = "tools"

hemojis = {
    "admin": "üëÆ‚Äç‚ôÇÔ∏è",
    "bot": "ü§ñ",
    "fun": "üé®",
    "misc": "üß©",
    "tools": "üß∞",
    "utils": "üóÇ",
    "extra": "‚ûï",
    "useless": "‚ö∞Ô∏è",
}


def get_key(val):
    for key, value in PLG_INFO.items():
        for cmd in value:
            if val == cmd:
                return key
    return None


def getkey(val):
    for key, value in GRP_INFO.items():
        for plugin in value:
            if val == plugin:
                return key
    return None


async def cmdinfo(input_str, event, plugin=False):
    if input_str[0] == cmdprefix:
        input_str = input_str[1:]
    try:
        about = CMD_INFO[input_str]
    except KeyError:
        if plugin:
            await edit_delete(
                event,
                f"**–ù–µ—Ç –ø–ª–∞–≥–∏–Ω–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã, –∫–∞–∫ **`{input_str}`** –≤ –º–æ–µ–º –±–æ—Ç–µ.**",
            )
            return None
        await edit_delete(
            event, f"**–ù–µ—Ç –ø–ª–∞–≥–∏–Ω–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã, –∫–∞–∫ **`{input_str}`** –≤ –º–æ–µ–º –±–æ—Ç–µ.**"
        )
        return None
    except Exception as e:
        await edit_delete(event, f"**–û—à–∏–±–∫–∞**\n`{e}`")
        return None
    outstr = f"**–ö–æ–º–∞–Ω–¥–∞ :** `{cmdprefix}{input_str}`\n"
    plugin = get_key(input_str)
    if plugin is not None:
        outstr += f"**–ü–ª–∞–≥–∏–Ω :** `{plugin}`\n"
        category = getkey(plugin)
        if category is not None:
            outstr += f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è :** `{category}`\n\n"
    outstr += f"**‚úò  –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ :**\n{about[0]}"
    return outstr


async def plugininfo(input_str, event, flag):
    try:
        cmds = PLG_INFO[input_str]
    except KeyError:
        outstr = await cmdinfo(input_str, event, plugin=True)
        return outstr
    except Exception as e:
        await edit_delete(event, f"**–û—à–∏–±–∫–∞**\n`{e}`")
        return None
    if len(cmds) == 1 and (flag is None or (flag and flag != "-p")):
        outstr = await cmdinfo(cmds[0], event, plugin=False)
        return outstr
    outstr = f"**–ü–ª–∞–≥–∏–Ω : **`{input_str}`\n"
    outstr += f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã :** `{len(cmds)}`\n"
    category = getkey(input_str)
    if category is not None:
        outstr += f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è :** `{category}`\n\n"
    for cmd in sorted(cmds):
        outstr += f"‚Ä¢  **cmd :** `{cmdprefix}{cmd}`\n"
        try:
            outstr += f"‚Ä¢  **–ò–Ω—Ñ–æ :** `{CMD_INFO[cmd][1]}`\n\n"
        except IndexError:
            outstr += "‚Ä¢  **–ò–Ω—Ñ–æ :** `None`\n\n"
    outstr += f"**üë©‚Äçüíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å : ** `{cmdprefix}help <command name>`\
        \n**Note : **–ï—Å–ª–∏ –∏–º—è –∫–æ–º–∞–Ω–¥—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º –ø–ª–∞–≥–∏–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ `{cmdprefix}help -c <command name>`."
    return outstr


async def grpinfo():
    outstr = "**–ü–ª–∞–≥–∏–Ω—ã:**\n\n"
    outstr += f"**üë©‚Äçüíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å : ** `{cmdprefix}help <plugin name>`\n\n"
    category = ["admin", "bot", "fun", "misc", "tools", "utils", "extra"]
    if BADCAT:
        category.append("useless")
    for cat in category:
        plugins = GRP_INFO[cat]
        outstr += f"**{hemojis[cat]} {cat.title()} **({len(plugins)})\n"
        for plugin in plugins:
            outstr += f"`{plugin}`  "
        outstr += "\n\n"
    return outstr


async def cmdlist():
    outstr = "**–û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: :**\n\n"
    category = ["admin", "bot", "fun", "misc", "tools", "utils", "extra"]
    if BADCAT:
        category.append("useless")
    for cat in category:
        plugins = GRP_INFO[cat]
        outstr += f"**{hemojis[cat]} {cat.title()} ** - {len(plugins)}\n\n"
        for plugin in plugins:
            cmds = PLG_INFO[plugin]
            outstr += f"‚Ä¢ **{plugin.title()} has {len(cmds)} commands**\n"
            for cmd in sorted(cmds):
                outstr += f"  - `{cmdprefix}{cmd}`\n"
            outstr += "\n"
    outstr += f"**üë©‚Äçüíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å : ** `{cmdprefix}help -c <command name>`"
    return outstr


@catub.cat_cmd(
    pattern="help ?(-c|-p|-t)? ?([\s\S]*)?",
    command=("help", plugin_category),
    info={
        "header": "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.",
        "description": "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –ø–ª–∞–≥–∏–Ω—É",
        "note": "–ï—Å–ª–∏ –∏–º—è –∫–æ–º–∞–Ω–¥—ã –∏ –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞. –ò—Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç —Ñ–ª–∞–≥, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        "flags": {
            "c": "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ.",
            "p": "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–µ.",
            "t": "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
        },
        "usage": [
            "{tr}help (plugin/command name)",
            "{tr}help -c (command name)",
        ],
        "examples": ["{tr}help help", "{tr}help -c help"],
    },
)
async def _(event):
    "To get guide for catuserbot."
    flag = event.pattern_match.group(1)
    input_str = event.pattern_match.group(2)
    reply_to_id = await reply_id(event)
    if flag and flag == "-c" and input_str:
        outstr = await cmdinfo(input_str, event)
        if outstr is None:
            return
    elif input_str:
        outstr = await plugininfo(input_str, event, flag)
        if outstr is None:
            return
    elif flag == "-t":
        outstr = await grpinfo()
    else:
        results = await event.client.inline_query(Config.TG_BOT_USERNAME, "help")
        await results[0].click(event.chat_id, reply_to=reply_to_id, hide_via=True)
        await event.delete()
        return
    await edit_or_reply(event, outstr)


@catub.cat_cmd(
    pattern="cmds(?:\s|$)([\s\S]*)",
    command=("cmds", plugin_category),
    info={
        "header": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.",
        "description": "–ï—Å–ª–∏ –≤—Ö–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
        "usage": [
            "{tr}cmds –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
            "{tr}cmds <plugin name> –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞",
        ],
    },
)
async def _(event):
    "To get list of commands."
    if input_str := event.pattern_match.group(1):
        try:
            cmds = PLG_INFO[input_str]
        except KeyError:
            return await edit_delete(event, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–ª–∞–≥–∏–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ.__")
        except Exception as e:
            return await edit_delete(event, f"**–û—à–∏–±–∫–∞**\n`{e}`")
        outstr = f"‚Ä¢ **{input_str.title()} has {len(cmds)} commands**\n"
        for cmd in cmds:
            outstr += f"  - `{cmdprefix}{cmd}`\n"
        outstr += f"**üë©‚Äçüíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å : ** `{cmdprefix}help -c <command name>`"
    else:
        outstr = await cmdlist()
    await edit_or_reply(
        event, outstr, aslink=True, linktext="–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: :"
    )


@catub.cat_cmd(
    pattern="s ([\s\S]*)",
    command=("s", plugin_category),
    info={
        "header": "–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥.",
        "examples": "{tr}s song",
    },
)
async def _(event):
    "To search commands."
    cmd = event.pattern_match.group(1)
    if found := [i for i in sorted(list(CMD_INFO)) if cmd in i]:
        out_str = "".join(f"`{i}`    " for i in found)
        out = f"**–Ø –Ω–∞—à–µ–ª {len(found)} –∫–æ–º–∞–Ω–¥—ã –¥–ª—è: **`{cmd}`\n\n{out_str}"
        out += f"\n\n__–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ {cmdprefix}help -c <command>__"
    else:
        out = f"–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é ‚Äã‚Äã–∫–æ–º–∞–Ω–¥—É `{cmd}`"
    await edit_or_reply(event, out)


@catub.cat_cmd(
    pattern="dc$",
    command=("dc", plugin_category),
    info={
        "header": "–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å DC –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.",
        "description": "DC –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏ —Å–ø–∏—Å–æ–∫ DC –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã",
        "usage": "{tr}dc",
    },
)
async def _(event):
    "To get dc of your bot"
    result = await event.client(functions.help.GetNearestDcRequest())
    result = f"**Dc –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏:**\
              \n**–°—Ç—Ä–∞–Ω–∞ :** {result.country}\
              \n**–¢–µ–∫—É—â–∏–π Dc :** {result.this_dc}\
              \n**–ë–ª–∏–∂–∞–π—à–∏–π Dc :** {result.nearest_dc}\
              \n\n**–°–ø–∏—Å–æ–∫ —Ü–µ–Ω—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram:**\
              \n**DC1 : **Miami FL, USA\
              \n**DC2 :** Amsterdam, NL\
              \n**DC3 :** Miami FL, USA\
              \n**DC4 :** Amsterdam, NL\
              \n**DC5 : **Singapore, SG\
                "
    await edit_or_reply(event, result)
